%{
#include <stdio.h>
#include <stdlib.h>
%}
DIGITO [0-9]
SIGNO  [+-]
ESPACIO " "
SIGNO_PTOCOMA ";"
PAR_AB "("
PAR_CE ")"
SIGNO_ASIGNAR ":="
LLAVE_AB "{"
LLAVE_CE "}"
COMILLA_SIMPLE "'"

MENOR_QUE "<"
MENOR_IGUAL_QUE "<="
MAYOR_QUE ">"
MAYOR_IGUAL_QUE ">="
IGUAL "=="

MAS "+"
MENOS "-"
POR "*"
DIV "/"
MASS "++"
MENOSS "--"


DISTINTO "<>"
WHILE "while"
IF "if"
ELSE "else"

OP_LOGICOS {MENOR_QUE}|{MENOR_IGUAL_QUE}|{MAYOR_QUE}|{MAYOR_IGUAL_QUE}|{IGUAL}|{DISTINTO}
OP_ARITMETICOS {MAS}|{MENOS}|{POR}|{DIV}

TIPO_DATO_CHAR "char"
TIPO_DATO_INT "int"
TIPO_DATO_DOUBLE "double"
TIPOS_DATOS "char"|"int"|"double"
NUMERO_ENTERO {SIGNO}{DIGITO}+
NUMERO_SIN_SIGNO {DIGITO}+
LETRA_MINUS  [a-z]
LETRA_MAYUS  [A-Z]
PALABRA_MM {LETRA_MAYUS}+
PALABRA_NN {LETRA_MINUS}+
CHAR [a-zA-Z0-9]
DOUBLE {NUMERO_ENTERO}"."{DIGITO}

DEFINICION_INT {TIPO_DATO_INT}{ESPACIO}{VARIABLE}{SIGNO_PTOCOMA}
DEFINICION_CHAR {TIPO_DATO_CHAR}{ESPACIO}{VARIABLE}{SIGNO_PTOCOMA}
DEFINICION_DOUBLE {TIPO_DATO_DOUBLE}{ESPACIO}{VARIABLE}{SIGNO_PTOCOMA}

VARIABLE {LETRA_MAYUS}{PALABRA_NN}{NUMERO_SIN_SIGNO}|{PALABRA_NN}{NUMERO_SIN_SIGNO}|{PALABRA_MM}
ASIGNAR_VARIABLE {TIPOS_DATOS}{ESPACIO}{VARIABLE}{SIGNO_ASIGNAR}{ESPACIO}*{VARIABLE}{SIGNO_PTOCOMA}
ASIGNAR_VALOR_INT {TIPO_DATO_INT}{ESPACIO}{VARIABLE}{SIGNO_ASIGNAR}{ESPACIO}*{NUMERO_ENTERO}{SIGNO_PTOCOMA}
ASIGNAR_VALOR_CHAR {TIPO_DATO_CHAR}{ESPACIO}{VARIABLE}{SIGNO_ASIGNAR}{ESPACIO}*{COMILLA_SIMPLE}{CHAR}{COMILLA_SIMPLE}{SIGNO_PTOCOMA}
ASIGNAR_VALOR_DOUBLE {TIPO_DATO_DOUBLE}{ESPACIO}{VARIABLE}{SIGNO_ASIGNAR}{ESPACIO}*{DOUBLE}{SIGNO_PTOCOMA}
OPERACION_NUMEROS {NUMERO_SIN_SIGNO}{ESPACIO}*{OP_ARITMETICOS}{ESPACIO}*{NUMERO_SIN_SIGNO}{SIGNO_PTOCOMA}
OPERACION_VARIABLES {VARIABLE}{ESPACIO}*{OP_ARITMETICOS}{ESPACIO}*{VARIABLE}{SIGNO_PTOCOMA}|{VARIABLE}{MASS}{SIGNO_PTOCOMA}|{VARIABLE}{MENOSS}{SIGNO_PTOCOMA}

INSTRUCCION {ASIGNAR_VARIABLE}|{ASIGNAR_VALOR_CHAR}|{ASIGNAR_VALOR_INT}|{ASIGNAR_VALOR_DOUBLE}|{OPERACION_VARIABLES}
CONDICIONAL {VARIABLE}{OP_LOGICOS}{VARIABLE}

IF_COND {IF}{ESPACIO}*{PAR_AB}{CONDICIONAL}{PAR_CE}{ESPACIO}*{LLAVE_AB}{INSTRUCCION}{LLAVE_CE}
ELSE_COND {ELSE}{ESPACIO}*{LLAVE_AB}{INSTRUCCION}{LLAVE_CE}
IF_ELSE_COND {IF_COND}{ELSE_COND}
REP_COND_WHILE {WHILE}{ESPACIO}*{PAR_AB}{CONDICIONAL}{PAR_CE}{ESPACIO}*{LLAVE_AB}{INSTRUCCION}{LLAVE_CE}

/*** Puesto a ser probado

CONDICIONAL_FOR {PAR_AB}{ASIGNAR}*{SIGNO_PTOCOMA}{CONDICIONAL}{INSTRUCCION}{PAR_CE}
***/

%%
{NUMERO_ENTERO} {printf ("es un numero entero - ");}
{VARIABLE} {printf ("Esto es una variable - ");}
{ASIGNAR_VARIABLE}  {printf ("Asignacion de variable - ");}
{ASIGNAR_VALOR_INT} {printf ("Asignacion entero a variable - ");}
{REP_COND_WHILE} {printf ("Esto es un while completo- ");}
{TIPOS_DATOS} {printf ("Este es un tipo de dato - ");}
{OPERACION_NUMEROS} {printf ("Este es una operacion- ");}
{IF_COND} {printf ("Este es un if sin else- ");}
{IF_ELSE_COND} {printf ("Este es un if COMPLETO CON ELSE- ");}
{ASIGNAR_VALOR_CHAR} {printf ("Este es una asignacion de CHAR- ");}
{ASIGNAR_VALOR_DOUBLE} {printf ("Este es una asignacion de DOUBLE- ");}
{DOUBLE} {printf ("Esto es un double- ");}
{DEFINICION_INT} {printf ("Esto es LA DEFINICION DE UN ENTERO- ");}
{DEFINICION_CHAR} {printf ("Esto es LA DEFINICION DE UN CHAR- ");}
{DEFINICION_DOUBLE} {printf ("Esto es LA DEFINICION DE UN DOUBLE- ");}
{OPERACION_VARIABLES} {printf ("Esto es una operacion entre VARIABLES- ");}
%%

int main (int argc, char *argv[])
{
   if (argc == 2)
   {
      yyin = fopen (argv[1], "rt");
      if (yyin == NULL)
      {
         printf ("El fichero %s no se puede abrir\n", argv[1]);
         exit (-1);
      }
   }
  else 
     yyin = stdin;
  yylex ();
   return 0;
  
}

int yywrap ()
{
  return 1;
}